#!/usr/bin/env python3
import errno
import fcntl
import signal
from argparse import ArgumentParser
from contextlib import contextmanager

import yaml
from ocflib.misc.shell import edit_file

TIMEOUT = 2


# taken from https://stackoverflow.com/questions/5255220/fcntl-flock-how-to-implement-a-timeout
@contextmanager
def timeout(seconds):
    original_handler = signal.signal(signal.SIGALRM, lambda *_: None)

    try:
        signal.alarm(seconds)
        yield
    finally:
        signal.alarm(0)
        signal.signal(signal.SIGALRM, original_handler)


def edit_yaml(target_file):
    content = target_file.read()
    while True:
        content = edit_file(content)
        try:
            yaml.load(content)
            # passed the yaml check, now write at the start
            # of the file and truncate the old content
            target_file.seek(0)
            target_file.write(content)
            target_file.truncate()
            break
        except yaml.YAMLError:
            pass

        idunno = input('Syntax Error: Try again? [y/n] ')
        idunno = idunno.strip().lower()
        if idunno != 'y' and idunno != 'yes':
            break


def main():
    parser = ArgumentParser()
    parser.add_argument('path', nargs=1)
    args = parser.parse_args()

    path = args.path[0]

    with open(path, 'r+') as target_file:
        with timeout(TIMEOUT):
            try:
                fcntl.flock(target_file.fileno(), fcntl.LOCK_EX)
            except IOError as e:
                if e.errno != errno.EINTR:
                    raise e
                print('Could not acquire lock. Someone else is modifying this file')
                exit(1)
        # we got a lock, now we can edit
        edit_yaml(target_file)


if __name__ == '__main__':
    main()
