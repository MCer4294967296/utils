#!/bin/sh

# how: view or edit source of a command that calls a script in $PATH
# 2011-11-17: crudely assembled, daradib@OCF
# 2011-04-01: rewritten, daradib@OCF
# 2011-08-21: revised output, daradib@OCF
# 2012-02-01: revised formatting, daradib@OCF

set -e

usage(){
  echo "Usage: '$(basename "$0") [PAGER] COMMAND'"
  echo "PAGER is the program you use to view or edit (or run) files"
  echo "If ommitted, PAGER is less."
}

# process arguments and respond if needed
if [ $# -ne 2 ] && [ $# -ne 1 ]; then
  echo 'Error: Incorrect number of arguments.' 1>&2
  echo
  usage
  exit 1
elif [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
  usage
  exit
elif [ $# -eq 1 ]; then
  PAGER=less
  COMMAND="$1"
elif [ $# -eq 2 ]; then
  PAGER="$1"
  COMMAND="$2"
fi

# find file in PATH
file="$(which "$COMMAND")"

# if file does not exist, command does not exist
if [ -z "$file" ]; then
  echo "Error: Command '$COMMAND' could not be found (and executable) in your PATH." 1>&2
  exit 2
fi

# print file location
echo "Program found: $file"

# find filetype of file
filetype=$(file -i "$file" | awk '{print $2}' | cut -f 1 -d ';')

if echo "$filetype" | grep -q 'symlink$'; then

  # follow symlinks multiple levels to final target and determine type
  target="$(readlink -mn "$file")"
  targettype=$(file -bi "$target" | cut -d';' -f1)

  # if chase is installed list chain of symlinks or report
  #if [ -x /usr/bin/chase ]; then
  #  chase --verbose $file | sed 1d -e $d
  #else
  #  echo "Info: install chase for a full symlink chain."
  #fi

  # print final target of symlink chain
  echo "Final target@: $target"

  # if target is a symlink, it is broken
  if [ "$targettype" = 'application/x-symlink' ]; then
    echo "Error: $target is a dangling symlink." 1>&2
    exit 4
  fi

else
  # otherwise, file in PATH is the target file
  target="$file"
  targettype=$filetype
fi

# report filetype
echo "MIME filetype: $targettype"

# check for and report binary files
if echo "$targettype" | grep -q ^text; then
  echo "Error: Command '$COMMAND' does not refer to a script." 1>&2
  file -b "$target" 1>&2
  exit 2
fi

# check if pager exists
if [ -z "$(which "$PAGER")" ]; then
  echo "Error: Pager '$PAGER' could not be found (or not executable) in your PATH." 1>&2
  exit 1
fi

# view or edit the target script
eval "$PAGER" "$target"
