#!/usr/bin/env python3
"""Reconcile differences between OCF and CNS reverse DNS for OCF subnet

Provide CNS with a list of PTR record changes to make to match the PTR records
in the OCF subnet returned by the OCF nameserver.

Requires python3-dnspython
"""
import random

from dns import query
from dns import resolver
from dns import reversename
from dns import zone
from ocflib.infra.net import OCF_DNS_RESOLVER
from ocflib.infra.net import OCF_SUBNET_V4
from ocflib.infra.net import OCF_SUBNET_V6


def lookup(record, nameservers=None, rtype='A'):
    """Return stringified first result for the given record and record type."""
    if nameservers:
        my_resolver = resolver.Resolver()
        my_resolver.nameservers = nameservers
    else:
        my_resolver = resolver
    return str(my_resolver.query(record, rtype)[0])


def main(argv=None):
    ns_ocf = [OCF_DNS_RESOLVER.exploded]
    ns_cns = [lookup('adns1.berkeley.edu'), lookup('adns2.berkeley.edu')]

    v4_subnet = str(reversename.from_address(OCF_SUBNET_V4.network_address.exploded)).split('.', 1)[-1]
    v6_subnet = str(reversename.from_address(OCF_SUBNET_V6.network_address.exploded)).split('.', 16)[-1]

    ocf_records = set()
    cns_records = set()

    for subnet in v4_subnet, v6_subnet:
        for ns, records in (ns_ocf, ocf_records), (ns_cns, cns_records):
            for r in zone.from_xfr(query.xfr(random.choice(ns), subnet)):
                str_record = '{}.{}'.format(r.to_text(), subnet).lower()
                try:
                    result = lookup(str_record, ns, 'PTR').lower()
                except resolver.NXDOMAIN:
                    pass
                else:
                    records.add((str_record, result))

    to_add = ocf_records - cns_records
    to_remove = cns_records - ocf_records

    if not to_add and not to_remove:
        print('No changes needed')
        return 0

    if to_add:
        print('Please add the following to the DNS:')
        for record, result in sorted(to_add, key=lambda s: s[0][::-1]):
            print('{} IN PTR {}'.format(record, result))
        print()

    if to_remove:
        print('Please remove the following from the DNS:')
        for record, result in sorted(to_add, key=lambda s: s[0][::-1]):
            print('{} IN PTR {}'.format(record, result))


if __name__ == '__main__':
    exit(main())
