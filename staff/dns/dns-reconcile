#!/usr/bin/env python3
"""Reconcile differences between OCF and CNS reverse DNS for OCF subnet

Provide CNS with a list of PTR record changes to make to match the PTR records
in the OCF subnet returned by the OCF nameserver.

Requires python3-dnspython
"""
from ipaddress import ip_address
from ipaddress import ip_network
from itertools import chain

from dns import name
from dns import resolver
from dns import reversename
from ocflib.constants import OCF_SUBNET_V4

# TODO: use AXFR to transfer zones from OCF and campus nameservers for diffing


def lookup(record, my_resolver=None, rtype='A'):
    """Return stringified first result for the given record and record type."""
    if not my_resolver:
        my_resolver = resolver
    return str(my_resolver.query(record, rtype)[0])

# Define subnet and list of nameservers
net = list(chain(
    ip_network(OCF_SUBNET_V4),
    [ip_address('2607:f140:8801::1:' + str(host).split('.')[3]) for host in ip_network(OCF_SUBNET_V4)],
))

nameservers_ocf = [lookup('ns.ocf.berkeley.edu')]
nameservers_cns = [lookup('adns1.berkeley.edu'), lookup('adns2.berkeley.edu')]


def ptr_records(nameservers=False):
    '''Generate dict of PTR records in subnet from specified nameservers'''
    my_resolver = resolver.Resolver()
    if nameservers:
        my_resolver.nameservers = nameservers
    records = {}

    for ipaddress in net:
        record = reversename.from_address(str(ipaddress))
        try:
            records[str(record)] = lookup(record, my_resolver=my_resolver, rtype='PTR')
        except (resolver.NXDOMAIN, resolver.NoNameservers):
            # Ignore records that are not found
            pass
    return records

records_ocf = ptr_records(nameservers_ocf)
records_cns = ptr_records(nameservers_cns)

delete = []
add = []
# Compare OCF and CNS PTR records
for key in records_cns.keys():
    try:
        if records_cns[key].lower() != records_ocf[key].lower():
            # Modify (delete and add) inconsistent PTR records
            delete.append(key + ' IN PTR ' + records_cns[key])
            add.append(key + ' IN PTR ' + records_ocf[key])
    except KeyError:
        # Delete CNS PTR records not in OCF DNS
        delete.append(key + ' IN PTR ' + records_cns[key])

# Add OCF PTR records not in CNS DNS
for key in set(records_ocf).difference(set(records_cns)):
    add.append(key + ' IN PTR ' + records_ocf[key])


def ptr_to_ipv4(record):
    """Convert a PTR record to an IPv4 address"""
    domain = name.from_text(record.split()[0])
    ipaddress = ip_address(reversename.to_address(domain))
    return ipaddress

if delete:
    # Print records to delete in sorted order
    print('Please delete the following {0} DNS record(s):'.format(len(delete)))
    for record in sorted(delete, key=ptr_to_ipv4):
        print(record)
if delete and add:
    # Separate deletions and additions
    print('')
if add:
    # Print records to add in sorted order
    print('Please add the following {0} DNS record(s):'.format(len(add)))
    for record in sorted(add, key=ptr_to_ipv4):
        print(record)
if delete or add:
    print('\nThank you!')
else:
    print('No changes needed')
