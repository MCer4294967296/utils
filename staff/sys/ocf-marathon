#!/usr/bin/env python3
"""Control apps deployed via Marathon."""
import argparse
import getpass
import json
import os.path
import sys
import time
from functools import partial
from operator import itemgetter

import requests

marathon_url = None
user = None
password = None


def unbuf_print(*args, file=sys.stdout, **kwargs):
    print(*args, file=file, **kwargs)
    file.flush()


def _request(method, path, *args, expected_status=200, **kwargs):
    req = requests.request(
        method,
        marathon_url + path,
        auth=(user, password),
        *args,
        **kwargs
    )
    assert req.status_code == expected_status, req.status_code
    return req

get = partial(_request, 'get')
put = partial(_request, 'put')
delete = partial(_request, 'delete')
post = partial(_request, 'post')


def app_status(app):
    req = get('/v2/apps/' + app)
    return req.json()


def list_apps(args):
    req = get('/v2/apps')

    for app in sorted(req.json()['apps'], key=itemgetter('id')):
        unbuf_print('{}: {} desired, {} healthy, {} unhealthy, {} staged'.format(
            app['id'].lstrip('/'),
            app['instances'],
            app['tasksHealthy'],
            app['tasksUnhealthy'],
            app['tasksStaged'],
        ))


def deploy_app(args):
    status = app_status(args.app)
    image, tag = status['app']['container']['docker']['image'].split(':')

    if status['app']['deployments']:
        unbuf_print('A deployment is already in progress:')
        unbuf_print(status['app']['deployments'])

        if not args.force:
            return 1
        else:
            unbuf_print('You specified --force, so going ahead anyway.')

    unbuf_print('Updating from current tag "{}" to "{}"'.format(tag, args.version))
    status['app']['container']['docker']['image'] = '{}:{}'.format(image, args.version)
    put(
        '/v2/apps/' + args.app + ('?force=true' if args.force else ''),
        json={'container': status['app']['container']},
    )

    # wait for deployment to finish, report status
    status = None
    for _ in range(180):
        status = app_status(args.app)
        if not status['app']['deployments']:
            unbuf_print('Deployment finished!')
            return 0
        else:
            unbuf_print('Waiting for deployment to finish: {}'.format(status['app']['deployments']))
            time.sleep(1)
    else:
        bad_deployment, = status['app']['deployments']
        unbuf_print('Gave up waiting for deployment.')
        unbuf_print('Rolling back deployment: {}'.format(bad_deployment))

        delete('/v2/deployments/' + bad_deployment['id'])
        return 2


def view_errors(args):
    status = app_status(args.app)
    json.dump(status['app']['lastTaskFailure'], sys.stdout, indent=True)


def scale_app(args):
    put(
        '/v2/apps/' + args.app,
        json={
            'instances': args.instances,
        },
    )


def main(argv=None):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    # TODO: ideally this could use any of the marathon hosts
    parser.add_argument('--marathon', default='https://marathon0.ocf.berkeley.edu')
    parser.add_argument('--user', default=getpass.getuser())
    parser.add_argument(
        '--cred-path',
        default=os.path.join(os.path.expanduser('~'), '.ocf-marathon'),
    )

    subparsers = parser.add_subparsers(help='subcommand', dest='command')
    subparsers.required = True

    # list apps
    subparsers.add_parser(
        'list-apps', help='list all applications',
    )

    # deploy app
    parser_deploy_app = subparsers.add_parser(
        'deploy-app', help='deploy an application version',
    )
    parser_deploy_app.add_argument(
        '--force', action='store_true',
        help='force deployment, even if one is in progress',
    )
    parser_deploy_app.add_argument('app')
    parser_deploy_app.add_argument(
        'version', help='docker tag',
    )

    # scale app
    parser_scale_app = subparsers.add_parser(
        'scale-app', help='scale an application',
    )
    parser_scale_app.add_argument(
        '--instances', '-i', type=int, required=True,
        help='desired number of instances',
    )
    parser_scale_app.add_argument('app')

    # view errors
    parser_view_errors = subparsers.add_parser(
        'view-errors', help='view stderr from a failed start',
    )
    parser_view_errors.add_argument('app')

    # parse and dispatch
    args = parser.parse_args(argv)

    # this really kinda sucks
    global marathon_url
    marathon_url = args.marathon

    global user
    global password
    if os.path.isfile(args.cred_path):
        unbuf_print('Loading credentials from {}.'.format(args.cred_path))
        with open(args.cred_path) as f:
            creds = json.load(f)
        user = creds['user']
        password = creds['password']
    else:
        user = args.user
        password = getpass.getpass("{}'s password: ".format(user))

    return {
        'deploy-app': deploy_app,
        'list-apps': list_apps,
        'scale-app': scale_app,
        'view-errors': view_errors,
    }[args.command](args)


if __name__ == '__main__':
    exit(main())
