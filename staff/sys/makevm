#!/usr/bin/env python3
# Creates and configures a new vm
#
# Dependencies (Debian packages):
#  - python3-paramiko
#  - nmap
#
# TODO: replace shell=True subprocess invocations
import argparse
import os.path
import random
import re
import socket
import subprocess
import sys
import time
from ipaddress import ip_address
from ipaddress import IPv4Address

import paramiko
from ocflib.infra.net import ipv4_to_ipv6
from ocflib.infra.net import is_ocf_ip
from ocflib.infra.net import OCF_GATEWAY_V4
from ocflib.infra.net import OCF_GATEWAY_V6
from ocflib.infra.net import OCF_SUBNET_V4
from ocflib.misc.shell import bold
from ocflib.misc.shell import green

MAC_KVM_PREFIX = (0x52, 0x54, 0x00)
MAC_BYTES = 6


def exec_cmd(cmd):
    """Executes the given shell command with some pretty colors. Script
    exits if the command exits with a non-zero status code."""

    print(bold(green('$ ' + cmd)))
    subprocess.check_call(cmd, shell=True, stdout=sys.stdout)


def create_disk(name, size):
    """Creates a logical volume."""

    if os.path.exists('/dev/vg/' + name):
        print("Can't create new lv, /dev/vg/{} already exists.".format(name))
        print("Use 'lvremove /dev/vg/{}' if you want to destroy it.".format(name))
        sys.exit(2)

    cmd = 'lvcreate -L {}GB --name {} vg'.format(size, name)
    exec_cmd(cmd)


def generate_mac_addr():
    def random_byte(idx):
        if idx < len(MAC_KVM_PREFIX):
            return MAC_KVM_PREFIX[idx]
        return random.randint(0, 255)
    return ':'.join('{:02x}'.format(random_byte(i)) for i in range(MAC_BYTES))


def create_vm(name, memory, vcpus, os_type, os_variant, network, mac):
    """Creates a new VM."""

    # try to print info about the domain to see if it already exists
    # we expect this command to fail
    try:
        subprocess.check_call('virsh dominfo {}'.format(name), shell=True, stderr=subprocess.DEVNULL)
        print("Can't create new vm, domain {} already exists.".format(name))
        sys.exit(2)
    except subprocess.CalledProcessError:
        pass  # all good

    cmd = 'virt-install -r {} --pxe --os-type={} --os-variant={} ' + \
        '--disk {},cache=none --vcpus={} --network {},mac={} --graphics vnc --serial pty --name {}'
    cmd = cmd.format(memory, os_type, os_variant, '/dev/vg/' + name,
                     vcpus, network, mac, name)

    exec_cmd(cmd)


def get_running_vms():
    output = subprocess.check_output('virsh list', shell=True).decode('utf-8')
    return [line.split()[1] for line in output.splitlines()[2:-1]]


def wait_for_shutdown(name):
    while name in get_running_vms():
        time.sleep(1)


def start_vm(name):
    exec_cmd('virsh start {}'.format(name))


def get_ip(mac):
    """Get IP address for the given MAC address. This needs some work."""
    while True:
        try:
            subprocess.check_call('sudo -u nobody nmap -sn {}'.format(OCF_SUBNET_V4),
                                  stdout=subprocess.DEVNULL, shell=True)
            cmd = "arp -an | grep '{}'".format(mac)
            result = subprocess.check_output(cmd, shell=True).decode('utf-8').strip()
            return result.split(' ')[1][1:-1]
        except subprocess.CalledProcessError:
            time.sleep(1)


def get_ssh_connection(mac, user, password):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    # wait for the VM to be live
    while True:
        try:
            print('Determining IP for VM...')
            ip = get_ip(mac)
            print('Trying IP: {}'.format(ip))

            client.connect(ip, username=user, password=password, timeout=1)
        except (socket.timeout, socket.error):
            continue
        else:
            print()
            return client
        print('.', end='')
        sys.stdout.flush()
        time.sleep(1)


def get_net_iface(ssh):
    """Return the first available ethernet interface on the newly created VM.
    In current versions of systemd/udev, they are supposed to be named starting
    with the letters 'en', e.g. 'eno1', 'enp4s0'.
    """
    with ssh.open_sftp() as sftp:
        ifaces = sftp.listdir('/sys/class/net/')
        return next(iface for iface in ifaces if iface.startswith('en'))


def configure_network(ssh, ipv4):
    """Set up the correct IPv4 and IPv6 static addresses."""
    ipv6 = ipv4_to_ipv6(ipv4)
    interface = get_net_iface(ssh)

    lines = [
        'auto lo',
        'iface lo inet loopback',
        '',
        'auto {}'.format(interface),
        'iface {} inet static'.format(interface),
        '\taddress {}'.format(ipv4),
        '\tnetmask 255.255.255.0',
        '\tgateway {}'.format(OCF_GATEWAY_V4),
        '',
        'iface {} inet6 static'.format(interface),
        '\taddress {}'.format(ipv6),
        '\tnetmask 64',
        '\tgateway {}'.format(OCF_GATEWAY_V6),
    ]

    ssh.exec_command("echo -n \"\" > /etc/network/interfaces")

    for line in lines:
        ssh.exec_command("echo \"{}\" >> /etc/network/interfaces".format(line))


def confirm(prompt='Continue?', default=False):
    choices = 'Yn' if default else 'yN'
    response = input('{} [{}] '.format(prompt, choices)).lower()

    if response in ('y', 'yes'):
        return True

    if response in ('n', 'no'):
        return False

    return default


def _main(args):
    parser = argparse.ArgumentParser(
        description='Create and configure new VMs using libvirt CLI tools',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-m', '--memory', type=int, default=4096,
                        help='amount of memory (in MB)')
    parser.add_argument('-c', '--vcpus', type=int, default=2,
                        help='number of vCPUs')
    parser.add_argument('-s', '--storage', type=int, default=15,
                        help='amount of disk storage (in GB)')
    parser.add_argument('--os-type', type=str, default='linux',
                        help='os type')
    # strangely, there is no debianjessie :(
    parser.add_argument('--os-variant', type=str, default='debianwheezy',
                        help='os variant')
    parser.add_argument('--network', type=str, default='bridge=br0',
                        help='network configuration')
    parser.add_argument('--preseed-user', type=str, default='root',
                        help='user created in preseed')
    parser.add_argument('--preseed-password', type=str, default='r00tme',
                        help='password for user created in preseed')
    parser.add_argument('--skip-config', action='store_true', default=False,
                        help="don't configure the new VM")
    parser.add_argument('hostname', type=str,
                        help='hostname for the new VM')
    parser.add_argument('ip', type=str,
                        help='static IPv4 address for the new VM')

    args = parser.parse_args()

    # sanity checks
    if not 512 <= args.memory <= 16384:
        print('Warning: You want {} *MB* of memory.'.format(args.memory))

        if not confirm():
            print('Cancelled.')
            sys.exit(2)

    if not 5 <= args.storage <= 50:
        print('Warning: You want {} *GB* of storage.'.format(args.storage))

        if not confirm():
            print('Cancelled.')
            sys.exit(2)

    if not re.match('^[(a-z\-0-9]{1,20}$', args.hostname):
        print("Warning: Your hostname is '{}'.".format(args.hostname))
        print('You probably should NOT include the domain name.')

        if not confirm():
            print('Cancelled.')
            sys.exit(2)

    # Check to make sure the IP address provided is an OCF IPv4 address
    ip_addr = ip_address(args.ip)
    if not is_ocf_ip(ip_addr) or not isinstance(ip_addr, IPv4Address):
        print("Warning: Your IP is '{}'.".format(args.ip))
        print('It should probably be in {}.'.format(OCF_SUBNET_V4))

        if not confirm():
            print('Cancelled.')
            sys.exit(2)

    if os.geteuid() != 0:
        print('You are not root.')
        sys.exit(1)

    print('Creating new VM with the following details:')
    print('\tHostname: {}'.format(args.hostname))
    print('\tIP Address: {}'.format(args.ip))
    print('\tOS Type: {}'.format(args.os_type))
    print('\tOS Variant: {}'.format(args.os_variant))
    print('\tDisk Space: {} GB'.format(args.storage))
    print('\tMemory: {} MB'.format(args.memory))
    print('\tvCPUs: {}'.format(args.vcpus))
    print('\tNetwork: {}'.format(args.network))

    if not confirm():
        print('Cancelled.')
        sys.exit(2)

    mac = generate_mac_addr()

    create_disk(args.hostname, args.storage)
    create_vm(args.hostname, args.memory, args.vcpus, args.os_type, args.os_variant,
              args.network, mac)

    if args.skip_config:
        print('VM created, skipping configuration. Have fun!')
        sys.exit(0)

    print('VM created, waiting for it to finish installing and shut down...')
    wait_for_shutdown(args.hostname)

    print('Installation successful, starting VM...')
    start_vm(args.hostname)

    print('Connecting to VM via SSH...')
    client = get_ssh_connection(mac, args.preseed_user, args.preseed_password)

    print('Setting hostname to {}...'.format(args.hostname))
    client.exec_command('echo {} > /etc/hostname'.format(args.hostname))
    client.exec_command('hostname -F /etc/hostname')

    print('Configuring static IP {}...'.format(args.ip))
    configure_network(client, ip_addr)

    # TODO: Convert this to use the new puppet paths with puppet-agent
    print('Turning on puppet...')
    client.exec_command('rm -f /var/lib/puppet/state/agent_disabled.lock')

    print('Restarting VM...')
    client.exec_command('shutdown -r now')

    print('{} is now minimally configured. You should now sign the puppet cert.'.format(args.hostname))


if __name__ == '__main__':
    _main(sys.argv[1:])
