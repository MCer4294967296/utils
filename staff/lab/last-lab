#!/usr/bin/env python3
import argparse
import functools
import sys

import ocflib.lab.stats
from ocflib.infra.hosts import hostname_from_domain
from tabulate import tabulate


def make_fqdn(s):
    """Argparse custom type that appends ".ocf.berkeley.edu" to short hostnames."""
    if '.' not in s:
        return s + '.ocf.berkeley.edu'
    else:
        return s


def build_query(args):
    """Builds the MySQL query string with the given conditions."""
    query = 'SELECT * FROM `session`'
    query_args = []

    query_conditions = []
    if args.user:
        query_conditions.append('`user` = %s')
        query_args.append(args.user)
    if args.desktop:
        query_conditions.append('`host` = %s')
        query_args.append(args.desktop)

    if query_conditions:
        query += ' WHERE ' + ' AND '.join(query_conditions)
    query += ' ORDER BY `start` DESC LIMIT %s'
    query_args.append(args.limit)

    return (query, query_args)


def format_row(r):
    """Given a row from the `session` table, formats it for printing."""
    return (
        r['user'],
        hostname_from_domain(r['host']),
        r['start'],
        'Still logged in' if r['end'] is None else r['end'],
    )


def main():
    parser = argparse.ArgumentParser(description='Print out most recent desktop login records')
    parser.add_argument('user', nargs='?', type=str,
                        help='Show login records for the given user')
    parser.add_argument('-d', '--desktop', type=make_fqdn,
                        help='Only show logins for this desktop')
    parser.add_argument('-H', '--no-header', action='store_true',
                        help='Do not print a header')
    parser.add_argument('-n', '--limit', type=int, default=30,
                        help='Only show this many entries. Can also be '
                        'specified as -<LIMIT>.')
    # Parse limits specified in the form -<LIMIT>
    for i in range(10):
        parser.add_argument('-{}'.format(i), action='append_const',
                            const=i, dest='digits', help=argparse.SUPPRESS)
    args = parser.parse_args()

    if args.digits:
        # args.digits is a list of digits. Convert that to an integer.
        args.limit = functools.reduce(lambda x, y: 10 * x + y, args.digits)

    try:
        with open('/etc/ocfstats-ro.passwd', 'r') as fin:
            password = fin.read().strip()
    except FileNotFoundError:
        print('Could not find the file for ocfstats credentials.')
        print('Are you running this on supernova?')
        return 1

    with ocflib.lab.stats.get_connection(user='ocfstats-ro',
                                         password=password) as c:
        c.execute(*build_query(args))
        if args.no_header:
            headers = []
            tablefmt = 'plain'
        else:
            headers = ['User', 'Desktop', 'Start', 'End']
            tablefmt = 'simple'
        print(tabulate(map(format_row, c), headers=headers, tablefmt=tablefmt))


if __name__ == '__main__':
    sys.exit(main())
