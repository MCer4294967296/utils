#!/usr/bin/env python3
import argparse
import random
import socket
import time
from subprocess import call
from subprocess import Popen


def unused_port():
    def used(port):
        s = socket.socket()
        try:
            s.bind(('127.0.0.1', port))
        except Exception:
            return True
        else:
            s.close()
            return False

    port = None
    while port is None or used(port):
        port = random.randint(10000, 65535)

    return port


def wait_for_port(host, port, timeout=5, ssh_proc=None):
    spent = 0
    while True:
        if ssh_proc and ssh_proc.poll():
            raise ChildProcessError("SSH exited too quickly. Maybe run kinit?")

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex((host, port)) == 0:
                return
        time.sleep(0.1)
        spent += 0.1

        if spent > timeout:
            raise TimeoutError('Timed out after {} seconds.'.format(timeout))


def connect(args):
    port = unused_port()
    proc = Popen(['ssh', '-N', '-o', 'ExitOnForwardFailure=yes',
                  '-o', 'BatchMode=yes',
                  '-L', '{}:localhost:5900'.format(port), args.host])
    try:
        wait_for_port('localhost', port, ssh_proc=proc)
        call(['xvnc4viewer', 'localhost:{}'.format(port)])
    finally:
        proc.terminate()
        proc.wait()


if __name__ == '__main__':
    commands = {
        'connect': connect,
    }
    parser = argparse.ArgumentParser(
        description='Control the OCF television.',
    )
    parser.add_argument('-H', '--host', type=str, default='tv')
    parser.add_argument('command', type=str, nargs='?',
                        choices=commands.keys(), default='connect')

    args = parser.parse_args()
    commands[args.command](args)
