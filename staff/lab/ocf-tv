#!/usr/bin/env python3
import argparse
import random
import socket
import sys
import time
from subprocess import call
from subprocess import Popen


def unused_port():
    def used(port):
        s = socket.socket()
        try:
            s.bind(('127.0.0.1', port))
        except Exception:
            return True
        else:
            s.close()
            return False

    port = None
    while port is None or used(port):
        port = random.randint(10000, 65535)

    return port


def wait_for_port(host, port, timeout=5, ssh_proc=None):
    spent = 0
    while True:
        if ssh_proc and ssh_proc.poll():
            raise ChildProcessError('SSH exited too quickly. Maybe run kinit?')

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex((host, port)) == 0:
                return
        time.sleep(0.1)
        spent += 0.1

        if spent > timeout:
            raise TimeoutError('Timed out after {} seconds.'.format(timeout))


def volume(args):
    cmd = 'export PULSE_SERVER=localhost; '

    if args.amount is not None:
        cmd += 'pactl set-sink-volume 0 {}%; '.format(args.amount)

    # prints 9th line after match, which has volume info
    cmd += "pactl list sinks | awk '/Sink #0/{nr[NR+9]}; NR in nr' | cut -d' ' -f 6;"

    return call(('ssh', args.host, cmd))


def check_volume(val):
    x = int(val)
    if abs(x) > 150:
        raise argparse.ArgumentTypeError('Volume out of bounds: {} not in [0, 150]'.format(val))

    # need -- before negatives or pactl interprets it as an arg
    return '-- ' + val


def connect(args):
    port = unused_port()
    proc = Popen(['ssh', '-N', '-o', 'ExitOnForwardFailure=yes',
                  '-o', 'BatchMode=yes',
                  '-L', '{}:localhost:5900'.format(port), args.host])
    try:
        wait_for_port('localhost', port, ssh_proc=proc)
        call(['xvncviewer', 'localhost:{}'.format(port)])
    finally:
        proc.terminate()
        proc.wait()


if __name__ == '__main__':
    commands = {
        'connect': connect,
        'volume': volume,
        'mute': volume,
    }

    parser = argparse.ArgumentParser(
        description='Control the OCF television.',
    )

    parser.add_argument('-H', '--host', type=str, default='tv')

    command_subparser = parser.add_subparsers(dest='command')

    subparser_connect = command_subparser.add_parser('connect', help='open a vnc instance to view the TV screen')

    subparser_volume = command_subparser.add_parser('volume', help='set the volume on the TV using PulseAudio')
    subparser_volume.add_argument('amount', type=check_volume, nargs='?',
                                  help='volume in percent between 0% and 150%.'
                                       ' +/- a relative value is also allowed.')

    subparser_mute = command_subparser.add_parser('mute', help='mute the TV')
    # hack so volume() can be reused
    subparser_mute.add_argument('--amount', default=0, help=argparse.SUPPRESS)

    if len(sys.argv) == 1:
        args = parser.parse_args(['connect'])
    else:
        args = parser.parse_args()  # default is sys.argv

    commands[args.command](args)
