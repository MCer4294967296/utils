#!/usr/bin/env python3
import argparse
import random
import socket
import sys
import time
import subprocess

# occasionally the pulseaudio sink on tornado changes
# and this script breaks. If that happens, find the new
# sink (login to tornado, export PULSE_AUDIO=localhost,
# then do something like pactl list | grep 'Sink #' -A 10
# and update this with the result. If you get one that says
# "dummy output" then you forgot to export the env variable.

PACTL_SINK = 0

def unused_port():
    def used(port):
        s = socket.socket()
        try:
            s.bind(('127.0.0.1', port))
        except Exception:
            return True
        else:
            s.close()
            return False

    port = None
    while port is None or used(port):
        port = random.randint(10000, 65535)

    return port

def wait_for_port(host, port, timeout=5, ssh_proc=None):
    spent = 0
    while True:
        if ssh_proc and ssh_proc.poll():
            raise ChildProcessError('SSH exited too quickly. Maybe run kinit?')

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex((host, port)) == 0:
                return
        time.sleep(0.1)
        spent += 0.1

        if spent > timeout:
            raise TimeoutError('Timed out after {} seconds.'.format(timeout))

def check_volume(val):
    x = int(val)
    if abs(x) > 150:
        raise argparse.ArgumentTypeError('Volume out of bounds: {} not in [0, 150]'.format(val))

    return val
        
def volume(args):
    cmd = 'export PULSE_SERVER=localhost; '

    if args.amount is not None:
        cmd += 'pactl set-sink-volume {} {}%; '.format(PACTL_SINK, args.amount)

    # prints the 5th field in the 9th line after match, which has volume info
    cmd += "pactl list sinks | awk '/Sink #{}/ {{ target = NR + 9 }}; NR == target {{ print $5 }}'".format(PACTL_SINK)
    
    return subprocess.call(('ssh', args.host, cmd))

def mute(args):
    cmd = 'PULSE_SERVER=localhost pactl set-sink-mute {} toggle'.format(PACTL_SINK)
    return subprocess.call(('ssh', args.host, cmd))

def get_tunnel_sink():
    try:
        sink_name = subprocess.check_output("pactl list sinks | awk '/Name: tunnel/ { print $2 }'", shell=True)
        return str(sink_name.strip(), 'ascii')
    except:
        print('Failed to get the sink for the tunnel. Did you start it?')
        sys.exit(1)

def start_audio_tunnel(args = None):
    try:
        # shell=True not good but not using user input
        loaded = subprocess.check_call('pactl list modules | grep module-zeroconf-discover', shell=True,  stdout=subprocess.DEVNULL)
    except:
        output = subprocess.call(('pactl', 'load-module', 'module-zeroconf-discover'), stdout=subprocess.DEVNULL)
        if output is 1:
            print("Can't load zeroconf module, exiting...")
            sys.exit(1)
            
    # set tv as the default sink, sometimes avahi needs some time to discover it
    time.sleep(0.2)
    sink_name = get_tunnel_sink()
    output = subprocess.call(('pactl', 'set-default-sink', sink_name))    
    
def stop_audio_tunnel(args = None):
    # once the module is unloaded, the default sink automatically reverts,
    # and doesn't become the tunnel again until explicitly set
    output = subprocess.call(('pactl', 'unload-module', 'module-zeroconf-discover'))
    if output is 1:
        print("failed to unload module-zeroconf-discover")
        sys.exit(1)

def transfer_audio(args = None):
    start_audio_tunnel()
    tunnel = get_tunnel_sink()
    cmd = "pacmd list-sink-inputs | awk '/index: / { print $2 }' | xargs -I {} pacmd move-sink-input {} "
    subprocess.call(cmd + tunnel, shell=True)
            
def connect(args):
    port = unused_port()
    proc = subprocess.Popen(['ssh', '-N', '-o', 'ExitOnForwardFailure=yes',
                             '-o', 'BatchMode=yes',
                             '-L', '{}:localhost:5900'.format(port), args.host])
    try:
        wait_for_port('localhost', port, ssh_proc=proc)
        subprocess.call(['xvncviewer', 'localhost:{}'.format(port)])
    finally:
        proc.terminate()
        proc.wait()

if __name__ == '__main__':
    commands = {
        'connect': connect,
        'volume': volume,
        'mute': mute,
        'stop-tunnel': stop_audio_tunnel,
        'tunnel-audio': transfer_audio,
    }

    parser = argparse.ArgumentParser(
        description='Control the OCF television.',
    )

    parser.add_argument('-H', '--host', type=str, default='tv')

    command_subparser = parser.add_subparsers(dest='command')

    subparser_connect = command_subparser.add_parser('connect', help='open a vnc instance to view the TV screen')

    subparser_volume = command_subparser.add_parser('volume', help='set the volume on the TV using PulseAudio')
    subparser_volume.add_argument('amount', type=check_volume, nargs='?',
                                  help='volume in percent between 0% and 150%.'
                                       ' +/- a relative value is also allowed.')

    subparser_mute = command_subparser.add_parser('mute', help='toggle mute on the TV')
    
    subparser_stop_tunnel = command_subparser.add_parser('stop-tunnel', help='Stop tunneling audio to the TV')
    subparser_transfer_audio = command_subparser.add_parser('tunnel-audio', help='Start the PulseAudio tunnel to the TV and transfer all local sink inputs to the tunnel')

    
    if len(sys.argv) == 1:
        args = parser.parse_args(['connect'])
    else:
        args = parser.parse_args()  # default is sys.argv

    commands[args.command](args)
