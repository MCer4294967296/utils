#!/usr/bin/env python3
"""Returns active student group information about a signatory or
student group.
"""
import argparse
import sys

import ocflib.account.search as search
import ocflib.constants as constants
import ocflib.infra.ldap as ldap
import ocflib.ucb.directory as directory
from ocflib.ucb.groups import (
    list_groups,
    group_by_oid,
    signatories_for_group,
    groups_by_student_signat,
)
from ocflib.misc.shell import red
from tabulate import tabulate


def print_table(title, columns, headers):
    """Pretty print a table of groups or signatories."""
    bar = '=' * len(title)
    print(title)
    print(bar)
    print(tabulate(columns, headers=headers))


def show_groups_by_signat_username(username):
    """Show group signatory status of an OCF user."""
    attrs = search.user_attrs(username)
    if attrs is None:
        print(red("Username not found."))
        return
    elif 'calnetUid' not in attrs:
        print(red("CalNet UID not found."))
        return

    show_groups_by_student_signat(int(attrs['calnetUid'][0]))

def show_signatories_for_group(oid, signatories=None):
    """Show all signatories for a group."""
    if signatories is None:
        signatories = signatories_for_group(oid)

    if not signatories:
        print(red("No signatories found."))
        return

    name = group_by_oid(oid)['name']
    title = "{} ({})".format(name, oid)
    columns = [(attrs['name'], uid) for (uid, attrs) in signatories.items()]
    headers = ('Signatory', 'UID')

    print_table(title, columns, headers)


def show_groups_by_student_signat(uid, groups=None):
    """Show signatory status of a person on CalLink."""
    if groups is None:
        groups = groups_by_student_signat(uid)

    if not groups:
        print(red("No active student groups found."))
        return

    name = directory.name_by_calnet_uid(uid)
    title = "{} ({})".format(name, uid)
    columns = [(attrs['name'], uid) for (uid, attrs) in groups.items()]
    headers = ('Group', 'OID')

    print_table(title, columns, headers)


def show_signatories_by_group_name(name):
    """Show signatories of groups matching a name."""
    print("Searching for groups... ", end="", flush=True)

    groups = list_groups(name=name)

    if not groups:
        print(red("No student groups found."))
        return

    print("Found {} entries.".format(len(groups)))

    print("Searching for signatories...")

    found = False

    for (oid, attrs) in groups.items():
        signatories = signatories_for_group(oid)
        if signatories:
            found = True
            show_signatories_for_group(oid, signatories=signatories)
            print()

    if not found:
        print(red("No groups had signatories."))


def show_groups_by_signat_name(name):
    """Show signatory status of people matching a name."""
    print("Searching for people... ", end="", flush=True)

    uids = directory.calnet_uids_by_name(name)

    if not uids:
        print()
        print(red("CalNet UID not found."))
        return

    print("Found {} entries.".format(len(uids)))

    print("Searching for signatories...")

    found = False

    for uid in uids:
        groups = groups_by_student_signat(uid)
        if groups:
            found = True
            show_groups_by_student_signat(uid, groups=groups)
            print()

    if not found:
        print(red("No signatories found."))


def main():
    parser = argparse.ArgumentParser(
        description="Find active student groups and signatories")
    subparsers = parser.add_subparsers(dest="subparser_name", description="")

    UID_DESC = "Look up the signatory status of a person by CalNet UID"
    uid_parser = subparsers.add_parser('uid', description=UID_DESC,
            help=UID_DESC)
    uid_parser.add_argument('uid', type=int)

    OID_DESC = "Look up the signatories of a group by CalLink OID"
    oid_parser = subparsers.add_parser('oid', description=OID_DESC,
        help=OID_DESC)
    oid_parser.add_argument('oid', type=int)

    USER_DESC = "Look up the signatory status of an OCF user"
    user_parser = subparsers.add_parser('user', description=USER_DESC,
        help=USER_DESC)
    user_parser.add_argument('username', type=str)

    NAME_DESC = "Look up the signatory status of a person by name"
    name_parser = subparsers.add_parser('name', description=NAME_DESC,
        help=NAME_DESC)
    name_parser.add_argument('name', type=str, nargs='+',
        help="List of full or partial names or keywords. Technically, each " +
        "name must be matched by the LDAP 'cn' attribute.")

    GROUP_DESC = "Look up the signatories of a group by group name"
    group_parser = subparsers.add_parser('group', description=GROUP_DESC,
        help=GROUP_DESC)
    group_parser.add_argument('name', type=str, nargs='+',
        help="List of keywords to search for on the CalLink API")

    args = parser.parse_args(sys.argv[1:])
    if args.subparser_name == 'uid':
        show_groups_by_student_signat(args.uid)
    elif args.subparser_name == 'oid':
        show_signatories_for_group(args.oid)
    elif args.subparser_name == 'user':
        show_groups_by_signat_username(args.username)
    elif args.subparser_name == 'name':
        show_groups_by_signat_name(' '.join(args.name))
    elif args.subparser_name == 'group':
        show_signatories_by_group_name(' '.join(args.name))

if __name__ == '__main__':
    main()
