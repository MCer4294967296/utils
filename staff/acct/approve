#!/usr/bin/env python

import sys
import os
import subprocess
import tempfile
import yaml
from getpass import getpass
from django.conf import settings

# Import approve.py
sys.path[0] = '/opt/ocf/packages/account-tools/account_tools/approve'
from ocf_approve import ApprovalError, approve_user, approve_group

# Configure django settings for approve.py
approve_dir = '/opt/create/public'
custom_settings = {
                   'APPROVE_LOG': os.path.join(approve_dir, 'approved.log'),
                   'APPROVE_FILE': os.path.join(approve_dir, 'approved.users'),
                   'OCF_RESERVED_NAMES_LIST': os.path.join(approve_dir, 'reserved_names.txt'),
                   'PASSWORD_PUB_KEY': os.path.join(approve_dir, 'public_pass.pem'),
                  }
for filename in custom_settings.values():
    if not os.path.isfile(filename):
        sys.stderr.write("Are you on supernova?\n")
        raise IOError("File {0} not found\n".format(filename))
settings.configure(**custom_settings)

# Variables
editor = (os.environ.get('VISUAL') or os.environ.get('EDITOR') or 'nano')
helptext = """# Please ensure that:
#  * Person requesting account is signatory of group (see signat)
#  * Group does not have existing account (see checkacct)
#  * Requested account name is based on group name
#  * Paper form is signed
#
# CalLink organization ID:
#    To get the CalLink organization ID, use signat or the API directly:
#    https://studentservices.berkeley.edu/WebServices/StudentGroupServiceV2/Service.asmx?op=CalLinkOrganizations
#    (the OrganizationId element is the CalLink organization ID)
"""

def edit_yaml(input):
    fd, path = tempfile.mkstemp()
    try:
        yamlout = yaml.dump(input, default_flow_style=False)
        with os.fdopen(fd, 'w') as f:
            f.write(yamlout + '\n' + helptext)
        # We need to close the file and reopen it later in case the editor
        # overwrites the old file with a new file descriptor.
        while True:
            subprocess.check_call([editor, path])
            try:
                with open(path) as f:
                    output = yaml.load(f)
            except yaml.YAMLError as e:
                sys.stderr.write("Error parsing YAML: {0}\n".format(e))
                raw_input("Press enter to continue")
                continue
            else:
                break
    finally:
        os.remove(path)
    return output

def getpassword():
    while True:
        password = getpass("Enter password: ")
        password2 = getpass("Enter password again: ")
        if password == password2:
            return password
        else:
            print("Passwords do not match")

def main():
    account = dict(group_name = '',
                   callink_oid = '',
                   account_name = '',
                   responsible = '',
                   email = '',
                   forward=True)
    password = None
    while True:
        account = edit_yaml(account)
        while True:
            try:
                approve_group(password=password, **account)
            except TypeError as e:
                if not password:
                    password = getpassword()
                    continue
                else:
                    sys.stderr.write(str(e) + "\n")
                    raw_input("Press enter to continue")
                    break
            except ApprovalError as e:
                print(str(e))
                if 'password' in str(e).lower():
                    password = getpassword()
                    continue
                else:
                    raw_input("Press enter to continue")
                    break
            else:
                print("Account request recorded")
                return

if __name__ == '__main__':
    if len(sys.argv) == 1:
        main()
    else:
        print("approve accepts no command-line arguments")
