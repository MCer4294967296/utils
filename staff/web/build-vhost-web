#!/usr/bin/perl -w
# $Id: buildvirtual.pl,v 1.13 2008/05/24 08:33:18 sle Exp $
# 
# This script is used to process the automatically generated section
# of the Apache virtual host configuration.
#
# Initial version written by akopps, 08/04/2003
# updated from:  [12/1/2003 -jones]
#

use strict;

my $vhostconfig = "/home/s/st/staff/vhost/vhost.conf";
my $vhostout = "/etc/apache2/sites-enabled/virtual.conf";
# my $apachectl = "/opt/httpd/apache-2.0.48/bin/apachectl";
# my $apachectl = "/bin/false";

sub rewrite{
    my($login, $vhostname, $vhostaliases, $subdir) = @_;
    my $rootdir=rootdir($login, $subdir);
    $vhostname=qualify($vhostname);
    print VHOSTOUT <<EOF;
<VirtualHost *:80>
    ServerName $vhostname
EOF
    if ( $vhostaliases ne "-" ) {
        print VHOSTOUT "    ServerAlias";
        foreach my $name (split(/,/,$vhostaliases)) {
            print VHOSTOUT " $name"
        }
        print VHOSTOUT "\n";
    }
    print VHOSTOUT <<EOF;
    DocumentRoot $rootdir
    UserDir disable
    Options SymLinksIfOwnerMatch Indexes Includes
    RewriteEngine  on
    RewriteRule ^/~$login/(.*) /\$1 [redirect=permanent]
    RewriteRule ^/~$login\$     / [redirect=permanent]
    Redirect permanent / http://www.ocf.berkeley.edu/~$login$subdir/
</VirtualHost>

EOF
}


sub fullvirtual{
    my($login, $vhostname, $vhostaliases, $subdir) = @_;
    my $contact = $login . '@ocf.berkeley.edu';
    my $rootdir=rootdir($login, $subdir);
    my $name;

    $vhostname=qualify($vhostname);
    my $shortname = substr($vhostname, 0 , index($vhostname, "."));

    print VHOSTOUT <<EOF;
<VirtualHost *:80>
    ServerName $vhostname:80
    ServerAdmin $contact
    UserDir disable
    DocumentRoot $rootdir
    SuexecUserGroup $login ocf
    suPHP_Engine off
    AddHandler php5-fcgi .php
    Action php5-fcgi /php5-fcgi
    Alias /php5-fcgi /opt/suexec/$login/php5-fcgi-wrapper
EOF
    if ( $vhostaliases ne "-" ) {
        print VHOSTOUT "    ServerAlias";
        foreach $name (split(/,/,$vhostaliases)) {
            print VHOSTOUT " $name"
        }
        print VHOSTOUT "\n";
    }

    print VHOSTOUT <<EOF;

    <Directory $rootdir/>
        AllowOverride All
        Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec ExecCGI

    	AddHandler cgi-script cgi pl cgi-debug py

        <Limit GET POST OPTIONS PROPFIND>
            Order allow,deny
            Allow from all
        </Limit>
        <LimitExcept GET POST OPTIONS PROPFIND>
            Order deny,allow
            Deny from all
        </LimitExcept>
    </Directory>

    <Directory $rootdir/cgi-bin/>
        Options -All
    </Directory>

</VirtualHost>

EOF
}

sub rootdir{
    my($login, $subdir) = @_;

    my $u = substr($login,0,1);
    my $webdir = "/services/http/users/$u/$login";
    my $rootdir = $webdir.$subdir;

	return $rootdir;
}
sub qualify{
    my($vhostname) = @_;
    # check for qualified host name
    if ( $vhostname =~ /\./ ){
	return $vhostname;
    }

    return $vhostname.".berkeley.edu";
    
}

open (VHOSTCONFIG, "<", "$vhostconfig")
    or die ("Could not open $vhostconfig for reading: $!\n");

open (VHOSTOUT, ">", "$vhostout")
    or die ("Could not open $vhostout for writing: $!\n");

print VHOSTOUT <<EOF;
#
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT IT DIRECTLY!
# To add a virtual host, follow the instructions at the top of
# $vhostconfig
#
EOF

while (<VHOSTCONFIG>) {
    next if /^#/;
    chomp;
    next unless /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/;
    my $vhostname = $2;
    my $login = $1;
    my $vhostaliases = $3;
    my $subdir=$4;

    my $rewrite = ($login =~ /!$/ );
    $login =~ s/!$//;

    if ($vhostname eq "-"){
	$vhostname = $login;
    }

    if ( $vhostaliases eq "-" && !($vhostname =~ /\./ )){
	$vhostaliases=$vhostname;
    }

    if ( $subdir eq "-" ){
        $subdir= "";
    }

    print STDERR "Processing $vhostname... ";
    if ( !$rewrite )  {
    	fullvirtual($login, $vhostname, $vhostaliases, $subdir);
    } else  {
    	rewrite($login, $vhostname, $vhostaliases, $subdir);
    }
    print STDERR "done\n";
}

close VHOSTOUT or die ("Could not close $vhostout: $!\n");

#print STDERR "Checking configuration file syntax\n";
#print STDERR "'$apachectl configtest' output:\n";
#system("$apachectl configtest");
#print STDERR "\n\nWould you like to gracefully restart the web server? [y/n]";
#my $in = <STDIN>;
#if ( $in =~ /^[Yy]/ ) {
 #  print STDERR "Restarting the web server with 'apachectl graceful'\n";
 #  system("$apachectl graceful");
#} else {
#    print STDERR "Web server restart canceled\n";
#}
